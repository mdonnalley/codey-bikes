name: Fix issues with Codey

on:
    issues:
        types: [opened]

jobs:
    run-script:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Clone gemini-cli repository
              run: |
                  git clone https://github.com/mdonnalley/gemini-cli.git
                  cd gemini-cli
                  npm install
                  npm run build

            - name: Codey will fix it
              run: |
                  echo "Running Codey..."
                  echo "Issue number: ${{ github.event.issue.number }}"
                  echo "Issue title: ${{ github.event.issue.title }}"
                  echo "Issue author: ${{ github.event.issue.user.login }}"
                  node gemini-cli/scripts/start.js --prompt \
                   "You are a coding assistant specializing in fixing issues in this project. Analyze the issue and make the necessary changes to resolve it. ISSUE TITLE: ${{ github.event.issue.title }} ISSUE BODY: ${{ github.event.issue.body }}" \
                   --yolo
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  ISSUE_NUMBER: ${{ github.event.issue.number }}
                  ISSUE_TITLE: ${{ github.event.issue.title }}
                  ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
                  ISSUE_BODY: ${{ github.event.issue.body }}
                  CODEY_IGNORE_CHAT_COMPRESSION: true
                  SF_LLMG_USERNAME: ${{ secrets.SF_LLMG_USERNAME }}

            - name: Create branch and commit changes
              run: |
                  # Configure git
                  git config --local user.email "codey@agentic-cli.com"
                  git config --local user.name "Codey"

                  # Create and switch to new branch
                  BRANCH_NAME="issue-${{ github.event.issue.number }}-automated-changes"
                  git checkout -b "$BRANCH_NAME"

                  # Add all changes
                  git add -A

                  # Check if there are changes to commit
                  if git diff --cached --quiet; then
                    echo "No changes to commit"
                    exit 0
                  fi

                  # Commit changes
                  git commit -m "Automated changes for issue #${{ github.event.issue.number }}

                  Generated by gemini-cli script in response to:
                  ${{ github.event.issue.title }}

                  Closes #${{ github.event.issue.number }}"

                  # Push the branch
                  git push origin "$BRANCH_NAME"

            - name: Generate PR description
              id: pr-description
              run: |
                  # Get the latest commit hash
                  COMMIT_HASH=$(git rev-parse HEAD)
                  echo "Generating PR description for commit: $COMMIT_HASH"

                  # Generate PR description using gemini-cli
                  PR_DESCRIPTION=$(node gemini-cli/scripts/start.js --yolo --prompt "write a brief and clear PR description for the changes made in this commit $COMMIT_HASH. Do not give any preamble to the description, e.g. Heres a description... I ONLY want the final PR description")

                  # Save to output and environment
                  echo "PR_DESCRIPTION<<EOF" >> $GITHUB_OUTPUT
                  echo "$PR_DESCRIPTION" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SF_LLMG_USERNAME: ${{ secrets.SF_LLMG_USERNAME }}
                  CODEY_IGNORE_CHAT_COMPRESSION: true

            - name: Create Pull Request
              uses: actions/github-script@v7
              with:
                  script: |
                      const branchName = `issue-${{ github.event.issue.number }}-automated-changes`;
                      const prDescription = `${{ steps.pr-description.outputs.PR_DESCRIPTION }}`;

                      try {
                          const { data: pullRequest } = await github.rest.pulls.create({
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              title: `Automated changes for issue #${{ github.event.issue.number }}`,
                              head: branchName,
                              base: 'main',
                              body: `${prDescription}

                      ---
                      **Original Issue:** ${{ github.event.issue.title }}
                      **Issue Author:** @${{ github.event.issue.user.login }}
                      **Generated by:** Codey

                      Closes #${{ github.event.issue.number }}`
                          });

                          console.log(`Created PR #${pullRequest.number}: ${pullRequest.html_url}`);

                      } catch (error) {
                          console.error('Error creating PR:', error);

                          // Comment on issue if PR creation fails
                          await github.rest.issues.createComment({
                              issue_number: ${{ github.event.issue.number }},
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              body: `‚ùå Failed to create pull request with automated changes. Please check the workflow logs for details.`
                          });
                      }
